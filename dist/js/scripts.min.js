angular.module("stockControl",["ngRoute","ui.bootstrap"]),angular.module("stockControl").filter("startFrom",function(){return function(input,start){return input?(start=+start,input.slice(start)):[]}}),angular.module("stockControl").config(function($routeProvider){$routeProvider.when("/l",{templateUrl:"view/loading.html"}),$routeProvider.when("/",{templateUrl:"view/index.html"}),$routeProvider.when("/category",{templateUrl:"view/category/category.html",controller:"categoryController",resolve:{_categories:function(categoryAPI){return categoryAPI.getCategories()}}}),$routeProvider.when("/category/add",{templateUrl:"view/category/category-add.html",controller:"categoryAddController"}),$routeProvider.when("/category/update/:id",{templateUrl:"view/category/category-upd.html",controller:"categoryUpdController"}),$routeProvider.when("/product",{templateUrl:"view/product/product.html",controller:"productController",resolve:{_products:function(productAPI){return productAPI.getProducts()}}}),$routeProvider.when("/product/add",{templateUrl:"view/product/product-add.html",controller:"productAddController"}),$routeProvider.when("/product/update/:id",{templateUrl:"view/product/product-upd.html",controller:"productUpdController"}),$routeProvider.when("/stock",{templateUrl:"view/stock/stock.html",controller:"stockController",resolve:{_entries:function(stockAPI){return stockAPI.getEntries()}}}),$routeProvider.when("/stock/add",{templateUrl:"view/stock/stock-add.html",controller:"stockAddController"}),$routeProvider.when("/stock/update/:id",{templateUrl:"view/stock/stock-upd.html",controller:"stockUpdController"}),$routeProvider.otherwise({templateUrl:"view/error.html"})}),angular.module("stockControl").controller("categoryAddController",function($scope,categoryAPI,$location){$scope.addCategory=function(category){categoryAPI.saveCategory(category).then(function(response){$location.path("/category")},function(response){bootbox.alert("Ocorreu um erro ao adicionar a categoria!")})}}),angular.module("stockControl").controller("categoryController",function($scope,_categories,categoryAPI,$route,filterFilter){$scope.categories=_categories.data,$scope.delCategory=function(id){bootbox.confirm("Deseja deletar essa categoria?",function(result){result&&categoryAPI.deleteCategory(id).then(function(response){bootbox.alert("Categoria deletada com sucesso!"),$route.reload()},function(response){bootbox.alert("Ocorreu um erro ao deletar a categoria! :(")})})},$scope.delCategories=function(){bootbox.confirm("Deseja deletar todas as categorias selecionadas?",function(result){result&&($scope.categories.forEach(function(e){e.selected&&categoryAPI.deleteCategory(e.id).then(function(response){},function(response){bootbox.alert("Ocorreu um erro ao apagar uma das categorias!")})}),$route.reload())})},$scope.currentPage=1,$scope.totalItems=$scope.categories.length,$scope.entryLimit=10,$scope.isSomeSelected=function(objs){return objs.some(function(obj){return obj.selected})},$scope.sort=function(key){$scope.keysort=key,$scope.reverseSort=!$scope.reverseSort}}),angular.module("stockControl").controller("categoryUpdController",function($scope,categoryAPI,$location,$routeParams){categoryAPI.getCategory($routeParams.id).then(function(response){$scope.category=response.data},function(response){$location.path("/error")}),$scope.updCategory=function(){categoryAPI.updateCategory($routeParams.id,$scope.category).then(function(response){$location.path("/category")},function(response){bootbox.alert("Ocorreu um erro ao atualizar a categoria!")})}}),angular.module("stockControl").controller("productAddController",function($scope,productAPI,categoryAPI,$location){categoryAPI.getCategories().then(function(response){$scope.categories=response.data}),$scope.addProduct=function(product){productAPI.saveProduct(product).then(function(response){$location.path("/product")},function(response){bootbox.alert("Ocorreu um erro ao adicionar o produto!")})}}),angular.module("stockControl").controller("productController",function($scope,_products,productAPI,categoryAPI,$location,$route){$scope.products=_products.data,$scope.delProduct=function(id){bootbox.confirm("Deseja deletar esse produto?",function(result){result&&productAPI.deleteProduct(id).then(function(response){bootbox.alert("Produto deletado com sucesso!"),$route.reload()},function(response){bootbox.alert("Ocorreu um erro ao deletar o produto! :(")})})},$scope.delProducts=function(){bootbox.confirm("Deseja deletar todos os produtos selecionados?",function(result){result&&($scope.products.forEach(function(e){e.selected&&productAPI.deleteProduct(e.id).then(function(response){},function(response){bootbox.alert("Ocorreu um erro ao apagar um dos produtos!")})}),$route.reload())})},$scope.currentPage=1,$scope.totalItems=$scope.products.length,$scope.entryLimit=10,$scope.isSomeSelected=function(objs){return objs.some(function(obj){return obj.selected})},$scope.sort=function(key){$scope.keysort=key,$scope.reverseSort=!$scope.reverseSort}}),angular.module("stockControl").controller("productUpdController",function($scope,categoryAPI,productAPI,$routeParams,$location){categoryAPI.getCategories().then(function(response){$scope.categories=response.data}),productAPI.getProduct($routeParams.id).then(function(response){$scope.product=response.data},function(response){$location.path("/error")}),$scope.updProduct=function(){productAPI.updateProduct($routeParams.id,$scope.product).then(function(response){$location.path("/product")},function(response){bootbox.alert("Ocorreu um erro ao atualizar o produto!")})}}),angular.module("stockControl").controller("stockAddController",function($scope,productAPI,stockAPI,$location){productAPI.getProducts().then(function(response){$scope.products=response.data}),$scope.addEntry=function(entry){entry.date_time=new Date,stockAPI.saveEntry(entry).then(function(response){$location.path("/stock")},function(response){bootbox.alert("Ocorreu um erro ao adicionar a entrada!")})}}),angular.module("stockControl").controller("stockController",function($scope,_entries,stockAPI,$route){$scope.entries=_entries.data,$scope.delEntry=function(id){bootbox.confirm("Deseja deletar essa entrada do estoque?",function(result){result&&stockAPI.deleteEntry(id).then(function(response){bootbox.alert("Entrada deletada com sucesso!"),$route.reload()},function(response){bootbox.alert("Ocorreu um erro ao deletar a entrada! :(")})})},$scope.delEntries=function(){bootbox.confirm("Deseja deletar todas as entradas do estoque selecionadas?",function(result){result&&($scope.entries.forEach(function(e){e.selected&&stockAPI.deleteEntry(e.id).then(function(response){},function(response){bootbox.alert("Ocorreu um erro ao apagar uma das entradas!")})}),$route.reload())})},$scope.currentPage=1,$scope.totalItems=$scope.entries.length,$scope.entryLimit=10,$scope.isSomeSelected=function(objs){return objs.some(function(obj){return obj.selected})},$scope.sort=function(key){$scope.keysort=key,$scope.reverseSort=!$scope.reverseSort}}),angular.module("stockControl").controller("stockUpdController",function($scope,productAPI,stockAPI,$routeParams,$location){productAPI.getProducts().then(function(response){$scope.products=response.data}),stockAPI.getEntry($routeParams.id).then(function(response){$scope.entry=response.data,$scope.entry.date_time=new Date($scope.entry.date_time)},function(response){$location.path("/error")}),$scope.updEntry=function(){$scope.entry.date_time=new Date,stockAPI.updateEntry($routeParams.id,$scope.entry).then(function(response){$location.path("/stock")},function(response){bootbox.alert("Ocorreu um erro ao atualizar a entrada!")})}}),angular.module("stockControl").factory("categoryAPI",function($http,config,pagerService){return{getCategory:function(id){return $http.get(config.serverUrl+"/categories/"+id)},getCategories:function(){return $http.get(config.serverUrl+"/categories")},saveCategory:function(category){return $http.post(config.serverUrl+"/categories",category)},deleteCategory:function(id){return $http.delete(config.serverUrl+"/categories/"+id)},updateCategory:function(id,category){return $http.put(config.serverUrl+"/categories/"+id,category)}}}),angular.module("stockControl").factory("pagerService",function(){return{getPager:function(totalItems,currentPage,pageSize){currentPage=currentPage||1,pageSize=pageSize||10;var startPage,endPage,totalPages=Math.ceil(totalItems/pageSize);totalPages<=10?(startPage=1,endPage=totalPages):currentPage<=6?(startPage=1,endPage=10):totalPages<=currentPage+4?(startPage=totalPages-9,endPage=totalPages):(startPage=currentPage-5,endPage=currentPage+4);var startIndex=(currentPage-1)*pageSize;return{totalItems:totalItems,currentPage:currentPage,pageSize:pageSize,totalPages:totalPages,startPage:startPage,endPage:endPage,startIndex:startIndex,endIndex:Math.min(startIndex+pageSize-1,totalItems-1),pages:_.range(startPage,endPage+1)}}}}),angular.module("stockControl").factory("productAPI",function($http,config){return{getProduct:function(id){return $http.get(config.serverUrl+"/products/"+id)},getProducts:function(){return $http.get(config.serverUrl+"/products")},saveProduct:function(product){return $http.post(config.serverUrl+"/products",product)},deleteProduct:function(id){return $http.delete(config.serverUrl+"/products/"+id)},updateProduct:function(id,product){return $http.put(config.serverUrl+"/products/"+id,product)}}}),angular.module("stockControl").factory("stockAPI",function($http,config){return{getEntry:function(id){return $http.get(config.serverUrl+"/stock/"+id)},getEntries:function(){return $http.get(config.serverUrl+"/stock")},saveEntry:function(entry){return $http.post(config.serverUrl+"/stock",entry)},deleteEntry:function(id){return $http.delete(config.serverUrl+"/stock/"+id)},updateEntry:function(id,entry){return $http.put(config.serverUrl+"/stock/"+id,entry)}}}),bootbox.setLocale("br"),angular.module("stockControl").value("config",{serverUrl:"http://localhost:3000"});